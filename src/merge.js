var types = require("dis-isa");

function baseTransform(t, s) { return s; };

function mergeWith(transform) {
  function doCopy(target, source) {
    for (var key in source) {
      if (!source.hasOwnProperty(key)) {
        continue;
      }

      if (types.isBuffer(source[key])) {
        target[key] = transform(target[key], source[key], key);
      }
      else if (types.isPlainObject(source[key])) {
        target[key] = target[key] || {};
        target[key] = doCopy(target[key], transform(target[key], source[key], key));
      }
      else if (types.isArray(source[key])) {
        target[key] = target[key] || [];
        target[key] = doCopy(target[key], transform(target[key], source[key], key));
      }
      else {
        target[key] = transform(target[key], source[key], key);
      }
    }

    return target;
  }

  return doCopy;
}

/**
 * Deep copy all properties from the input objects (sources) into the target object.
 * It merges objects and arrays into new structures from left to right overriding
 * all other non array/object properties.
 *
 * @param {object} target - Object to copy properties to
 * @param {object | object[]} sources - The source objects to merge into the target object
 * @param {function} transform - Transform function called with current and next value, as well
 *  as the key in order to generate the final value for the particular object entry. The
 *  return value from this transform function is the final stored for the particular entry in
 *  the object. So be sure to return whatever value you want as the value
 *
 * @returns {object} Object with all source objects merged in.
 *
 * @example
 *
 * // The result of this is an object with the array entries concatinated
 * // and the exapnded out object property as generated by the transform
 * // method.
 * // {
 * //   data: [1, 2, 3, 4, 5, 6],
 * //   misc: {
 * //     expanded: "modded"
 * //   }
 * // }
 *
 *  var source1 = {
 *    data: [1, 2, 3],
 *    misc: "random"
 *  };
 *
 *  source2 = {
 *    data: [4, 5, 6]
 *  };
 *
 *  result = merge({}, [source1, source2], transform);
 *
 *  function transform(current, next) {
 *    if (Array.isArray(next)) {
 *      return current.concat(next);
 *    }
 *    else if (typeof next === "string") {
 *      return {
 *        expanded: "modded"
 *      };
 *    }
 *
 *    return next;
 *  }
 *
 */
function merge(target, sources, transform) {
  target = target || {};
  sources = types.isArray(sources) ? sources : [sources];

  var merger = mergeWith(transform || baseTransform);

  // Allow `n` params to be passed in to extend this object
  for (var i = 0, length  = sources.length; i < length; i++) {
    target = merger(target, sources[i]);
  }

  return target;
}

module.exports = merge;
